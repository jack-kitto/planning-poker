package atoms

import (
	"planning-poker/cmd/web/design"
)

type ButtonVariant string
type ButtonSize string

const (
	ButtonPrimary   ButtonVariant = "primary"
	ButtonSecondary ButtonVariant = "secondary"
	ButtonOutline   ButtonVariant = "outline"
	ButtonText      ButtonVariant = "text"
	ButtonDanger    ButtonVariant = "danger"

	ButtonSmall  ButtonSize = "small"
	ButtonMedium ButtonSize = "medium"
	ButtonLarge  ButtonSize = "large"
)

func getButtonClasses(variant ButtonVariant, size ButtonSize, fullWidth bool) string {
	var baseClasses = "font-semibold transition-colors duration-200 focus:outline-none"
	var variantClasses string
	var sizeClasses string
	var widthClass string

	// Variant classes
	switch variant {
	case ButtonPrimary:
		variantClasses = "bg-primary hover:bg-primary-light text-white " + design.Shadows.Medium
	case ButtonSecondary:
		variantClasses = "bg-" + design.Colors.Secondary + " hover:bg-secondary-light text-white"
	case ButtonOutline:
		variantClasses = "bg-transparent border border-" + design.Colors.Primary + " text-" + design.Colors.Primary + " hover:bg-indigo-50"
	case ButtonText:
		variantClasses = "bg-transparent text-" + design.Colors.Primary + " hover:bg-indigo-50"
	case ButtonDanger:
		variantClasses = "bg-" + design.Colors.Error + " hover:bg-red-600 text-white"
	default:
		variantClasses = "bg-" + design.Colors.Primary + " hover:bg-indigo-600 text-white"
	}

	// Size classes
	switch size {
	case ButtonSmall:
		sizeClasses = "py-1 px-3 text-sm"
	case ButtonMedium:
		sizeClasses = "py-2 px-4"
	case ButtonLarge:
		sizeClasses = "py-3 px-6"
	default:
		sizeClasses = "py-2 px-4"
	}

	// Width class
	if fullWidth {
		widthClass = "w-full"
	}

	return baseClasses + " " + variantClasses + " " + sizeClasses + " " + widthClass + " " + design.BorderRadius.Medium
}

templ Button(variant ButtonVariant, size ButtonSize, fullWidth bool, onClick templ.ComponentScript) {
	<button class={ getButtonClasses(variant, size, fullWidth) } onclick={ onClick }>
		{ children... }
	</button>
}

templ ButtonLink(href templ.SafeURL, variant ButtonVariant, size ButtonSize, fullWidth bool) {
	<a href={ href } class={ getButtonClasses(variant, size, fullWidth) }>
		{ children... }
	</a>
}
